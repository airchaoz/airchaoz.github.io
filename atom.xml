<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>echo&#39;s blog</title>
  <icon>http://www.airchaoz.top/icon.png</icon>
  <subtitle>文字是思考的过程</subtitle>
  <link href="http://www.airchaoz.top/atom.xml" rel="self"/>
  
  <link href="http://www.airchaoz.top/"/>
  <updated>2025-06-05T15:46:51.334Z</updated>
  <id>http://www.airchaoz.top/</id>
  
  <author>
    <name>echo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Transformer模型入门</title>
    <link href="http://www.airchaoz.top/2025/06/05/Transformer%E6%A8%A1%E5%9E%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://www.airchaoz.top/2025/06/05/Transformer%E6%A8%A1%E5%9E%8B%E5%85%A5%E9%97%A8/</id>
    <published>2025-06-05T13:08:51.000Z</published>
    <updated>2025-06-05T15:46:51.334Z</updated>
    
    
    <summary type="html">&lt;p&gt;Transformer模型最早是由Google在2017年发布的一篇论文《Attention Is All You Need》中提出。最早该方法用用于翻译任务中，发现性能能够超越之前最优秀的RNN模型。在后一年，Google发表的《BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding》提出了BERT模型，和OpenAI发布《Improving Language Understanding by Generative Pre-Training》提出了GPT模型，这两个著名的模型奠定了大模型的基础。&lt;/p&gt;</summary>
    
    
    
    
    <category term="机器学习" scheme="http://www.airchaoz.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>windbg使用教程</title>
    <link href="http://www.airchaoz.top/2025/05/29/windbg%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://www.airchaoz.top/2025/05/29/windbg%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2025-05-29T13:12:43.000Z</published>
    <updated>2025-06-02T04:13:25.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;windbg是微软开发的用于在win平台调试程序的强大工具，支持内核态、用户态调试。可以调试程序、正在运行的进程和动态库，本教程主要介绍在用户态模式下调试应用程序。&lt;/p&gt;</summary>
    
    
    
    
    <category term="效率工具" scheme="http://www.airchaoz.top/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MSBuild生成compile_command.json文件</title>
    <link href="http://www.airchaoz.top/2024/11/20/MSBuild%E7%94%9F%E6%88%90compile-command-json%E6%96%87%E4%BB%B6/"/>
    <id>http://www.airchaoz.top/2024/11/20/MSBuild%E7%94%9F%E6%88%90compile-command-json%E6%96%87%E4%BB%B6/</id>
    <published>2024-11-20T15:00:38.000Z</published>
    <updated>2024-11-20T15:08:15.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;在windows平台上，CMake生成&lt;code&gt;compile_command.json&lt;/code&gt;不是一件容易的事情，CMAKE_EXPORT_COMPILE_COMMANDS可能不会生效，同时也没有bear一样的生成工具。&lt;/p&gt;
&lt;p&gt;最近发现谷歌程序员开发的工具 &lt;a href=&quot;https://github.com/0xabu/MsBuildCompileCommandsJson&quot;&gt;https://github.com/0xabu/MsBuildCompileCommandsJson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以很方便的为CMake和MSBuild编译的项目生成&lt;code&gt;compile_command.json&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="效率工具" scheme="http://www.airchaoz.top/tags/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>spdlog源码阅读(四)：Sink系列类的实现</title>
    <link href="http://www.airchaoz.top/2024/10/14/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%9B%9B-%EF%BC%9ASink%E7%B3%BB%E5%88%97%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.airchaoz.top/2024/10/14/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E5%9B%9B-%EF%BC%9ASink%E7%B3%BB%E5%88%97%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-10-14T14:46:44.000Z</published>
    <updated>2024-10-14T14:48:38.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;Sink是一系列类，功能为负责日志输出的具体实现，其通过继承的方式实现拓展。基类Sink的类定义如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码阅读" scheme="http://www.airchaoz.top/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>spdlog源码阅读(三)：Register类的实现</title>
    <link href="http://www.airchaoz.top/2024/10/07/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%89-%EF%BC%9ARegister%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.airchaoz.top/2024/10/07/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%89-%EF%BC%9ARegister%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-10-07T13:39:08.000Z</published>
    <updated>2024-10-13T12:56:34.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 &lt;code&gt;spdlog&lt;/code&gt; 日志库中，&lt;code&gt;register&lt;/code&gt; 类是为了管理logger的生命周期并提供方便的全局访问。该类包括以下功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码阅读" scheme="http://www.airchaoz.top/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>spdlog源码阅读(二)：Logger类的实现</title>
    <link href="http://www.airchaoz.top/2024/09/28/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%EF%BC%9ALogger%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.airchaoz.top/2024/09/28/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%EF%BC%9ALogger%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-09-28T05:38:05.000Z</published>
    <updated>2024-10-13T12:56:29.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;日志对象创建&quot;&gt;&lt;a href=&quot;#日志对象创建&quot; class=&quot;headerlink&quot; title=&quot;日志对象创建&quot;&gt;&lt;/a&gt;日志对象创建&lt;/h1&gt;&lt;h2 id=&quot;全局默认logger&quot;&gt;&lt;a href=&quot;#全局默认logger&quot; class=&quot;headerlink&quot; title=&quot;全局默认logger&quot;&gt;&lt;/a&gt;全局默认logger&lt;/h2&gt;&lt;p&gt;spdlog库通过logger类提供日志接口，而logger的创建有多种方式。第一种方式是全局默认logger，例如，在官方example日志使用样例中提供的默认的日志调用：&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码阅读" scheme="http://www.airchaoz.top/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>spdlog源码阅读(一)：简介</title>
    <link href="http://www.airchaoz.top/2024/09/23/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-%EF%BC%9A%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.airchaoz.top/2024/09/23/spdlog%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-%EF%BC%9A%E7%AE%80%E4%BB%8B/</id>
    <published>2024-09-23T14:14:16.000Z</published>
    <updated>2024-11-24T09:18:58.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;spdlog是一个跨平台、快速和轻量的C++日志库，其完全header-only实现和基于C++11实现的特性使其可以很好的集成到任何项目中。项目地址：&lt;a href=&quot;https://github.com/gabime/spdlog&quot;&gt;https://github.com/gabime/spdlog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;spdlog短小精悍，代码行数在2w左右，且代码风格优秀，符合现代C++编程规范，有许多值得学习的实践，遂开坑对该源码开始阅读和理解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="源码阅读" scheme="http://www.airchaoz.top/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>多线程内存模型(3)：锁，原子变量</title>
    <link href="http://www.airchaoz.top/2024/09/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-3-%EF%BC%9A%E9%94%81%EF%BC%8C%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F/"/>
    <id>http://www.airchaoz.top/2024/09/20/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-3-%EF%BC%9A%E9%94%81%EF%BC%8C%E5%8E%9F%E5%AD%90%E5%8F%98%E9%87%8F/</id>
    <published>2024-09-20T15:08:36.000Z</published>
    <updated>2024-10-07T13:38:51.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;锁&lt;/h1&gt;&lt;p&gt;锁是多线程编程中最常用的同步机制，用于保护共享资源，防止多个线程同时访问或修改，从而避免数据不一致或竞态条件的发生。以下代码是互斥锁的使用，利用RAII来完成自动锁的自动析构。&lt;/p&gt;</summary>
    
    
    
    
    <category term="内存模型" scheme="http://www.airchaoz.top/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程内存模型(2)：内存屏障</title>
    <link href="http://www.airchaoz.top/2024/08/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-2-%EF%BC%9A%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/"/>
    <id>http://www.airchaoz.top/2024/08/08/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-2-%EF%BC%9A%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/</id>
    <published>2024-08-08T14:44:12.000Z</published>
    <updated>2024-08-10T09:08:23.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;重排序总的来说有四种类型&lt;/p&gt;</summary>
    
    
    
    
    <category term="内存模型" scheme="http://www.airchaoz.top/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程内存模型(1)：指令重排序</title>
    <link href="http://www.airchaoz.top/2024/07/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-1-%EF%BC%9A%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.airchaoz.top/2024/07/28/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-1-%EF%BC%9A%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E5%BA%8F/</id>
    <published>2024-07-28T09:28:22.000Z</published>
    <updated>2024-08-10T09:08:24.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;内存模型是多线程编程中非常复杂的概念，在了解这些内容之前需要了解一下前置知识&lt;/p&gt;</summary>
    
    
    
    
    <category term="内存模型" scheme="http://www.airchaoz.top/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>asio学习记录</title>
    <link href="http://www.airchaoz.top/2024/07/09/asio%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.airchaoz.top/2024/07/09/asio%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2024-07-09T13:47:47.000Z</published>
    <updated>2024-08-10T14:07:30.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;asio（Asynchronous Input&amp;#x2F;Output）是一个用于C++的跨平台库，主要用于网络和底层I&amp;#x2F;O编程。它提供了一套高效的异步I&amp;#x2F;O模型，使得开发者可以更轻松地编写高性能的网络应用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络编程" scheme="http://www.airchaoz.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>c++时间类型</title>
    <link href="http://www.airchaoz.top/2024/06/30/c-%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.airchaoz.top/2024/06/30/c-%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B/</id>
    <published>2024-06-30T13:30:23.000Z</published>
    <updated>2024-08-10T14:07:58.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;时间类型可以说是非常常用的类型，在使用的过程中经常感觉掌握的不够全面，这里梳理一下，作为记录。</summary>
    
    
    
    
    <category term="C++" scheme="http://www.airchaoz.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++并发编程之线程管理</title>
    <link href="http://www.airchaoz.top/2024/06/27/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://www.airchaoz.top/2024/06/27/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2024-06-27T14:05:52.000Z</published>
    <updated>2024-08-10T14:07:43.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;C++11 引入的一个标准库类&lt;code&gt;std::thread&lt;/code&gt;，用于创建和管理线程。它提供了一种方便的方式来执行并发任务，使得多线程编程变得更加简单和安全。&lt;/p&gt;</summary>
    
    
    
    
    <category term="并发编程" scheme="http://www.airchaoz.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++跨平台开发总结</title>
    <link href="http://www.airchaoz.top/2024/06/24/C-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://www.airchaoz.top/2024/06/24/C-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</id>
    <published>2024-06-24T14:05:29.000Z</published>
    <updated>2024-08-10T14:07:51.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;C++编写的程序是可以跨平台的，这是因为C++语言本身是一种独立于平台的编程语言。但是不同的操作系统和不同的编译器使用起来会有一些差异，这里记录了C++跨Win&amp;#x2F;Linux平台开发时需要注意的一些要点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="跨平台开发" scheme="http://www.airchaoz.top/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>抓包工具的使用</title>
    <link href="http://www.airchaoz.top/2024/06/13/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.airchaoz.top/2024/06/13/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-06-13T14:00:29.000Z</published>
    <updated>2024-08-10T14:07:20.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;HTTP抓包工具有老牌的Fiddler和Charles，但这些工具仅限于HTTP抓包，想要抓取传输层的tcp包则需要用到更加强大的wireshark和tcpdump。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络, 抓包" scheme="http://www.airchaoz.top/tags/%E7%BD%91%E7%BB%9C-%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>内存映射MMAP</title>
    <link href="http://www.airchaoz.top/2024/04/23/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84MMAP/"/>
    <id>http://www.airchaoz.top/2024/04/23/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84MMAP/</id>
    <published>2024-04-23T13:01:00.000Z</published>
    <updated>2024-08-10T14:07:17.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;mmap 是一种操作系统提供的系统调用，用于在进程的虚拟地址空间中创建内存映射区域，实现文件和内存之间的直接映射。&lt;/p&gt;</summary>
    
    
    
    
    <category term="操作系统, 内存" scheme="http://www.airchaoz.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>docker核心知识概括</title>
    <link href="http://www.airchaoz.top/2024/03/26/docker%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E6%A6%82%E6%8B%AC/"/>
    <id>http://www.airchaoz.top/2024/03/26/docker%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E6%A6%82%E6%8B%AC/</id>
    <published>2024-03-26T15:04:32.000Z</published>
    <updated>2024-08-10T14:08:07.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Docker架构&quot;&gt;&lt;a href=&quot;#Docker架构&quot; class=&quot;headerlink&quot; title=&quot;Docker架构&quot;&gt;&lt;/a&gt;Docker架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog-512.oss-cn-shenzhen.aliyuncs.com/202403262322463.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Docker的核心组件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker客户端：Client&lt;/li&gt;
&lt;li&gt;Docker服务端：Docker Daemon&lt;/li&gt;
&lt;li&gt;Docker镜像：Image&lt;/li&gt;
&lt;li&gt;Registry：镜像远端&lt;/li&gt;
&lt;li&gt;Docker容器：Container&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Docker" scheme="http://www.airchaoz.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>GDB-Dashboard的使用</title>
    <link href="http://www.airchaoz.top/2024/02/14/GDB-Dashboard%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.airchaoz.top/2024/02/14/GDB-Dashboard%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-02-14T14:00:32.000Z</published>
    <updated>2024-08-10T14:08:09.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;GDB-Dashboard是一个使用Python API编写的独立的.gdbinit文件，能提供一个模块化的界面，方便我们控制GDB显示的信息。&lt;/p&gt;</summary>
    
    
    
    
    <category term="开发工具" scheme="http://www.airchaoz.top/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>TF Lite和Flex 的编译、使用</title>
    <link href="http://www.airchaoz.top/2023/12/13/TF-Lite%E5%92%8CFlex-%E7%9A%84%E7%BC%96%E8%AF%91%E3%80%81%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.airchaoz.top/2023/12/13/TF-Lite%E5%92%8CFlex-%E7%9A%84%E7%BC%96%E8%AF%91%E3%80%81%E4%BD%BF%E7%94%A8/</id>
    <published>2023-12-13T13:55:01.000Z</published>
    <updated>2024-10-13T12:56:37.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;当谈到深度学习和机器学习框架时，必定绕不开Tensorflow。作为一个备受欢迎的开源工具，它被广泛用于构建、训练和部署机器学习模型。TensorFlow 由 Google 开发，并于2015年首次发布，它的目标是提供一个灵活、可扩展且易于使用的框架，使研究人员和工程师能够快速开发和部署深度学习模型。&lt;/p&gt;</summary>
    
    
    
    
    <category term="机器学习" scheme="http://www.airchaoz.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CMake进阶</title>
    <link href="http://www.airchaoz.top/2023/08/27/CMake%E8%BF%9B%E9%98%B6/"/>
    <id>http://www.airchaoz.top/2023/08/27/CMake%E8%BF%9B%E9%98%B6/</id>
    <published>2023-08-27T08:28:29.000Z</published>
    <updated>2024-08-10T14:08:01.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;补充上篇博客没有提到的内容，方便更完善的构建C++程序。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CMake" scheme="http://www.airchaoz.top/tags/CMake/"/>
    
  </entry>
  
</feed>
